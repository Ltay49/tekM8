import { View, Modal, TouchableOpacity, Text, StyleSheet, Alert } from "react-native"
import { useState } from "react";

export default function NamingModal() {

    const [namingModalVisible, setNamingModalVisible] = useState(false);
    const [selectedName, setSelectedName] = useState<string>('');
    const [documents, setDocuments] = useState<Document[]>([]);
    const [previewUri, setPreviewUri] = useState<string | null>(null);
    const [editingDocId, setEditingDocId] = useState<string | null>(null);

    const confirmName = () => {
        if (!selectedName) {
            Alert.alert('Please select a name option before confirming');
            return;
        }

        if (editingDocId) {
            // Rename existing document
            setDocuments((prev) =>
                prev.map((doc) =>
                    doc.id === editingDocId ? { ...doc, name: selectedName } : doc
                )
            );
        } else if (tempFileUri) {
            // Add new document
            setDocuments((prev) => [
                ...prev,
                {
                    id: Date.now().toString(),
                    name: selectedName,
                    uri: tempFileUri,
                },
            ]);
        }

        setTempFileUri(null);
        setSelectedName('');
        setEditingDocId(null);
        setNamingModalVisible(false);
    };

    const cancelNaming = () => {
        setTempFileUri(null);
        setSelectedName('');
        setEditingDocId(null);
        setNamingModalVisible(false);
    };


    return (
        <>
            <Modal visible={namingModalVisible} transparent animationType="fade">
                <View style={styles.namingModalBackground}>
                    <View style={styles.namingModalContainer}>
                        <Text style={styles.namingModalTitle}>Name your PDF</Text>

                        <View style={styles.namingOptionsRow}>
                            {['PPE Sheet', 'Induction checklist'].map((option) => (
                                <TouchableOpacity
                                    key={option}
                                    style={[
                                        styles.namingOptionButton,
                                        selectedName === option && styles.namingOptionSelected,
                                    ]}
                                    onPress={() => setSelectedName(option)}
                                >
                                    <Text
                                        style={[
                                            styles.namingOptionText,
                                            selectedName === option && styles.namingOptionTextSelected,
                                        ]}
                                    >
                                        {option}
                                    </Text>
                                </TouchableOpacity>
                            ))}
                        </View>

                        <View style={styles.namingButtonsRow}>
                            <TouchableOpacity
                                style={[styles.namingButton, styles.cancelButton]}
                                onPress={cancelNaming}
                            >
                                <Text style={styles.namingButtonText}>Cancel</Text>
                            </TouchableOpacity>

                            <TouchableOpacity
                                style={[
                                    styles.namingButton,
                                    selectedName ? styles.confirmButtonDisabledFalse : styles.confirmButtonDisabledTrue,
                                ]}
                                onPress={confirmName}
                                disabled={!selectedName}
                            >
                                <Text style={styles.namingButtonText}>Confirm</Text>
                            </TouchableOpacity>
                        </View>
                    </View>
                </View>
            </Modal>
        </>
    )
}

const styles = StyleSheet.create({

    namingModalBackground: {
        flex: 1,
        backgroundColor: 'rgba(0,0,0,0.5)',
        justifyContent: 'center',
        alignItems: 'center',
    },
    namingModalContainer: {
        backgroundColor: '#fff',
        padding: 20,
        borderRadius: 12,
        width: '85%',
    },
    namingModalTitle: {
        fontSize: 18,
        fontWeight: 'bold',
        marginBottom: 15,
    },
    namingOptionsRow: {
        flexDirection: 'row',
        justifyContent: 'space-around',
        marginBottom: 15,
    },
    namingOptionButton: {
        paddingVertical: 10,
        paddingHorizontal: 14,
        borderWidth: 1,
        borderColor: '#007AFF',
        borderRadius: 8,
    },
    namingOptionSelected: {
        backgroundColor: '#007AFF',
    },
    namingOptionText: {
        color: '#007AFF',
        fontWeight: '600',
    },
    namingOptionTextSelected: {
        color: '#fff',
    },
    namingButtonsRow: {
        flexDirection: 'row',
        justifyContent: 'space-between',
    },
    namingButton: {
        flex: 1,
        paddingVertical: 12,
        borderRadius: 8,
    },
    cancelButton: {
        backgroundColor: '#aaa',
        marginRight: 10,
    },
    confirmButtonDisabledTrue: {
        backgroundColor: '#ccc',
    },
    confirmButtonDisabledFalse: {
        backgroundColor: '#007AFF',
    },
    namingButtonText: {
        color: '#fff',
        fontWeight: 'bold',
        textAlign: 'center',
    },
})